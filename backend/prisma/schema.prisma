generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String?       @unique
  phone         String?       @unique
  password      String
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  sectionId     String?
  section       Section?      @relation("UserSection", fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  status        Status        @default(active)
  image         String?
  gender        Gender
  bloodGroup    BloodGroup
  motherTongue  String
  religion      String
  languageKnown String
  sessions      Session[]
  files         File[]
  activityLogs  ActivityLog[]
  addressId     String?
  address       Address[]

  @@map("user")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("role")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    Status
  address   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model File {
  id        String   @id @default(cuid())
  fileName  String
  fileType  String
  location  String
  fileSize  Int?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("file")
}

model Class {
  id        String    @id @default(cuid())
  name      String
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("class")
}

model Section {
  id        String   @id @default(cuid())
  section   String
  classId   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  users     User[]   @relation("UserSection")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId, section])
  @@map("section")
}

model Student {
  id            String           @id @default(cuid())
  firstName     String
  lastName      String
  birthDate     DateTime
  age           Int
  sectionId     String
  parentId      String
  parent        Parent           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  admissionDate DateTime
  rollNumber    Int
  siblings      StudentSibling[] @relation("StudentSiblings")
  relatedTo     StudentSibling[] @relation("RelatedSiblings")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([sectionId, rollNumber])
  @@map("student")
}

model StudentSibling {
  id           String  @id @default(cuid())
  studentId    String
  siblingId    String
  relationship String?
  student      Student @relation("StudentSiblings", fields: [studentId], references: [id], onDelete: Cascade)
  sibling      Student @relation("RelatedSiblings", fields: [siblingId], references: [id], onDelete: Cascade)
}

model library {
  id    String @id @default(cuid())
  
}
model Address {
  id        String   @id @default(cuid())
  city      String?
  subCity   String
  woreda    String
  kebele    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Parent {
  id               String    @id @default(cuid())
  motherName       String
  fatherName       String
  fatherEmail      String
  motherEmail      String
  fatherPhone      String
  motherPhone      String
  fatherOccupation String
  motherOccupation String
  isGuardian       Boolean   
  children         Student[]

  @@map("parent")
}


model Teacher {
  id    String @id @default(cuid())
  firstName String 
  lastName String

  bankInfo Bank[]
}

model Bank {
  id    String @id @default(cuid())
  accountNumber String
  bankName String
  accountName String
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  performedAt DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity      String
  entityId    String
  details     Json

  @@map("activity_log")
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  O_POS
  O_NEG
  AB_POS
  AB_NEG
}

enum RoleType {
  admin
  student
  parent
  library
  teacher
}

enum Gender {
  male
  female
}

enum Status {
  active
  inactive
}
