// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  username        String    @unique
  email           String?   @unique
  isEmailVerified Boolean
  password        String
  image           String?
  roleId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]

  role         Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  AuditLog     AuditLog[]
  UserActivity UserActivity[]

  @@index([username, email, roleId, name])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users           User[]
  permissions     Permission[]      @relation("RolePermissions")
  rolePermissions RolePermissions[]

  @@index([name])
  @@map("role")
}

model PermissionGroup {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[] @relation("GroupPermissions")

  @@index([name])
  @@map("permission_group")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles           Role[]            @relation("RolePermissions")
  rolePermissions RolePermissions[]
  permissionGroup PermissionGroup[] @relation("GroupPermissions")

  @@index([name])
  @@map("permission")
}

model RolePermissions {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  userId     String?
  targetId   String?
  targetType String?
  timestamp  DateTime @default(now())
  details    Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp, targetType, targetId])
  @@map("audit_log")
}

model UserActivity {
  id         String   @id @default(uuid())
  userId     String
  action     String
  actionType String
  timestamp  DateTime @default(now())
  details    Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp, action, actionType])
  @@map("user_activity")
}
