// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  username        String    @unique
  email           String?   @unique
  isEmailVerified Boolean
  password        String
  image           String?
  roleId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]

  role         Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  AuditLog     AuditLog[]
  passwordResets PasswordReset[]
  
  // School-specific relations
  student      Student?
  teacher      Teacher?

  @@index([username, email, roleId, name])
  @@map("user")
}

model PasswordReset {
  id     String @id @default(uuid())
  userId String 
  token  String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users           User[]
  permissions     Permission[]      @relation("RolePermissions")
  rolePermissions RolePermissions[]

  @@index([name])
  @@map("role")
}

model PermissionGroup {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[] @relation("GroupPermissions")

  @@index([name])
  @@map("permission_group")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles           Role[]            @relation("RolePermissions")
  rolePermissions RolePermissions[]
  permissionGroup PermissionGroup[] @relation("GroupPermissions")

  @@index([name])
  @@map("permission")
}

model RolePermissions {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  userId     String?
  targetType String?
  timestamp  DateTime @default(now())
  details    Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp, targetType])
  @@map("audit_log")
}

// School Management Models

model Student {
  id             String    @id @default(uuid())
  userId         String    @unique
  studentId      String    @unique
  firstName      String
  lastName       String
  email          String?   @unique
  phone          String?
  dateOfBirth    DateTime
  address        String?
  guardianName   String
  guardianPhone  String
  guardianEmail  String?
  enrollmentDate DateTime  @default(now())
  status         StudentStatus @default(ACTIVE)
  grade          String
  section        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments    CourseEnrollment[]
  attendances    Attendance[]
  grades         Grade[]

  @@index([studentId, firstName, lastName, grade])
  @@map("student")
}

model Teacher {
  id             String    @id @default(uuid())
  userId         String    @unique
  teacherId      String    @unique
  firstName      String
  lastName       String
  email          String?   @unique
  phone          String?
  dateOfBirth    DateTime?
  address        String?
  qualification  String
  experience     Int       // years of experience
  salary         Decimal?
  joinDate       DateTime  @default(now())
  status         TeacherStatus @default(ACTIVE)
  specialization String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses        Course[]
  classes        Class[]

  @@index([teacherId, firstName, lastName])
  @@map("teacher")
}

model Course {
  id          String    @id @default(uuid())
  courseCode  String    @unique
  title       String
  description String?
  credits     Int
  teacherId   String
  semester    String
  year        Int
  status      CourseStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  teacher     Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments CourseEnrollment[]
  classes     Class[]
  grades      Grade[]

  @@index([courseCode, title, teacherId])
  @@map("course")
}

model CourseEnrollment {
  id         String    @id @default(uuid())
  studentId  String
  courseId   String
  enrolledAt DateTime  @default(now())
  status     EnrollmentStatus @default(ENROLLED)

  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("course_enrollment")
}

model Class {
  id          String    @id @default(uuid())
  courseId    String
  teacherId   String
  room        String
  dayOfWeek   DayOfWeek
  startTime   String    // Format: "HH:MM"
  endTime     String    // Format: "HH:MM"
  startDate   DateTime
  endDate     DateTime?
  status      ClassStatus @default(SCHEDULED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  attendances Attendance[]

  @@index([courseId, teacherId, dayOfWeek])
  @@map("class")
}

model Attendance {
  id        String    @id @default(uuid())
  studentId String
  classId   String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
  @@index([studentId, date])
  @@map("attendance")
}

model Grade {
  id         String    @id @default(uuid())
  studentId  String
  courseId   String
  examType   ExamType
  marks      Decimal
  maxMarks   Decimal
  percentage Decimal
  grade      String    // A+, A, B+, etc.
  remarks    String?
  examDate   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([studentId, courseId, examType])
  @@map("grade")
}

// Enums
enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
  TRANSFERRED
}

enum ClassStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ExamType {
  QUIZ
  MIDTERM
  FINAL
  ASSIGNMENT
  PROJECT
  PRACTICAL
}

